sputnik_vm_steps: &sputnik_vm_steps
  steps:
    - restore_cache:
        key: v8-toolchain-{{ arch }}
    - attach_workspace:
        at: ~/
    - run:
        name: Compile SputnikVM-ffi
        command: |
          export GOPATH=$HOME/go
          export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin
          cd $GOPATH/src/github.com/ethereumproject/go-ethereum
          make -C vendor/github.com/ETCDEVTeam/sputnikvm-ffi/c
    - persist_to_workspace:
        root: ~/
        paths:
          - go/src/github.com/ethereumproject/go-ethereum/vendor/github.com/ETCDEVTeam/sputnikvm-ffi/c/libsputnikvm.a

deploy_steps: &deploy_steps
  steps:
    - restore_cache:
        key: v8-toolchain-{{ arch }}
    - attach_workspace:
        at: ~/
    - deploy:
        name: Deploy to builds.etcdevteam.com
        command: |
          if [[ $CIRCLE_PROJECT_USERNAME != ethereumproject ]]; then echo "Deployments only enabled from ethereumproject/ repo. Exiting." && exit 0; fi
          export GOPATH=$HOME/go
          export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin
          cd $GOPATH/src/github.com/ethereumproject/go-ethereum
          cp $GOPATH/bin/geth ./
          export VERSION=`janus version -format TAG_OR_NIGHTLY`
          ./geth version | awk '/^Version: /{if (ENVIRON["VERSION"] != $2){printf "Expected: \"%s\", got \"%s\"\n",ENVIRON["VERSION"], $2; exit 1}}'

          ./scripts/deploy.sh gcloud-circleci.json.enc

unit_tests_steps: &unit_tests_steps
  steps:
    - restore_cache:
        key: v8-toolchain-{{ arch }}
    - attach_workspace:
        at: ~/
    - run:
        name: Run unit tests
        command: |
          export GOPATH=$HOME/go
          export GOBIN=$GOPATH/bin
          export PATH=$PATH:$GOBIN
          export TAGS="netgo deterministic"
          if [ $USE_SPUTNIK_VM == true ]; then
            export CGO_LDFLAGS="$GOPATH/src/github.com/ethereumproject/go-ethereum/vendor/github.com/ETCDEVTeam/sputnikvm-ffi/c/libsputnikvm.a -ldl"
            if [ "$(uname)" == "Darwin" ]; then
              export CGO_LDFLAGS="$CGO_LDFLAGS -lresolv"
            fi
            export TAGS="sputnikvm $TAGS"
          fi
          export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin
          cd $GOPATH/src/github.com/ethereumproject/go-ethereum
          go env
          # Since core/ and tests/ packages are run deterministically, we can safely
          # infer that SputnikVM is functioning the same as the native VM without running
          # the schroedinger nondeterministic tests with sputnik enabled.
          go test -ldflags "-X github.com/ethereumproject/go-ethereum/core.UseSputnikVM=$USE_SPUTNIK_VM" -tags="$TAGS" ./...
          schroedinger -t 5 -f ./schroedinger-tests.txt

bats_tests_steps: &bats_tests_steps
    steps:
      - restore_cache:
          key: v8-toolchain-{{ arch }}
      - attach_workspace:
          at: ~/
      - run:
          name: Run bats tests
          command: |
            export GOPATH=$HOME/go
            export CGO_LDFLAGS="$GOPATH/src/github.com/ethereumproject/go-ethereum/vendor/github.com/ETCDEVTeam/sputnikvm-ffi/c/libsputnikvm.a -ldl"
            if [ "$(uname)" == "Darwin" ]; then
              export CGO_LDFLAGS="$CGO_LDFLAGS -lresolv"
            else
              export EXT_LD_FLAGS="-extldflags=-static"
            fi
            export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin:$HOME/bin
            cd $GOPATH/src/github.com/ethereumproject/go-ethereum
            # go install ... doesn't work with netgo on CircleCI on Linux
            go build -tags="sputnikvm netgo" -ldflags "$EXT_LD_FLAGS -X main.Version=`janus version -format TAG_OR_NIGHTLY`" ./cmd/geth
            mkdir -p $GOPATH/bin
            mv ./geth $GOPATH/bin/
            bats tests/bats
      - persist_to_workspace:
          root: ~/
          paths:
              - go/*

version: 2
jobs:
  mac_env_setup:
    macos:
      xcode: "9.0"
    steps:
      - restore_cache:
          key: v8-toolchain-{{ arch }}
      - run:
          name: Prepare directories
          command: |
            export GOPATH=$HOME/go
            export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin
            mkdir -p $GOPATH/src/github.com/ethereumproject
      - checkout:
          path:  ~/go/src/github.com/ethereumproject/go-ethereum
      - run:
          name: Install required software
          command: |
            export GOPATH=$HOME/go
            export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin]
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
            if [ ! -x ~/janusbin/janus ]; then
              cd $HOME; curl -sL https://raw.githubusercontent.com/ethereumproject/janus/master/get.sh | bash
              brew update
              export BDIR="$(brew --repo homebrew/core)" && echo "$BDIR" && git -C "$BDIR" reset --hard master && git -C "$BDIR" fetch origin ac2308d7640e45de0de1dbcbb6d4f42fcdd8adde && git -C "$BDIR" checkout FETCH_HEAD && HOMEBREW_NO_AUTO_UPDATE=1 brew install go && brew switch go 1.9.3 && git -C "$BDIR" checkout master && unset BDIR
              brew info go
              go version
              brew install bats
              brew install gpg2
              go get github.com/etcdevteam/go-schroedinger/cmd/schroedinger/...
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - go/src/github.com/ethereumproject/*
      - save_cache:
          key: v8-toolchain-{{ arch }}
          paths:
            - /usr/local/bin/bats
            - /usr/local/bin/go
            - /usr/local/bin/godoc
            - /usr/local/bin/gofmt
            - /usr/local/bin/gpg
            - /usr/local/opt
            - /usr/local/Cellar
            - /usr/local/Homebrew
            - ~/.cargo
            - ~/.rustup
            - ~/janusbin
            - ~/go/bin

  linux_env_setup:
    docker:
      - image: circleci/golang:1.9
    steps:
      - restore_cache:
          key: v8-toolchain-{{ arch }}
      - run:
          name: Prepare directories
          command: |
            export GOPATH=$HOME/go
            export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin
            mkdir -p $GOPATH/src/github.com/ethereumproject
      - checkout:
          path:  ~/go/src/github.com/ethereumproject/go-ethereum
      - run:
          name: Install required software
          command: |
            export GOPATH=$HOME/go
            export PATH=$PATH:$HOME/.cargo/bin:$HOME/janusbin
            git clone https://github.com/sstephenson/bats.git
            cd bats
            sudo ./install.sh ~/
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
            if [ ! -x ~/janusbin/janus ]; then
              cd $HOME; curl -sL https://raw.githubusercontent.com/ethereumproject/janus/master/get.sh | bash
            fi
            go get github.com/etcdevteam/go-schroedinger/cmd/schroedinger/...
      - persist_to_workspace:
          root: ~/
          paths:
            - go/src/github.com/ethereumproject/*
      - save_cache:
          key: v8-toolchain-{{ arch }}
          paths:
            - ~/bin
            - ~/libexec
            - ~/.cargo
            - ~/.rustup
            - ~/janusbin
            - ~/go/bin

  mac_sputnik_vm:
    macos:
      xcode: "9.0"
    <<: *sputnik_vm_steps

  linux_sputnik_vm:
    docker:
      - image: circleci/golang:1.9
    <<: *sputnik_vm_steps

  mac_evm_unit_tests:
    macos:
      xcode: "9.0"
    environment:
        USE_SPUTNIK_VM: false
    <<: *unit_tests_steps

  linux_evm_unit_tests:
    docker:
      - image: circleci/golang:1.9
    environment:
        GOMAXPROCS: 2
        USE_SPUTNIK_VM: false
    <<: *unit_tests_steps

  mac_sputnikvm_unit_tests:
    macos:
      xcode: "9.0"
    environment:
        USE_SPUTNIK_VM: true
    <<: *unit_tests_steps

  linux_sputnikvm_unit_tests:
    docker:
      - image: circleci/golang:1.9
    environment:
        GOMAXPROCS: 2
        USE_SPUTNIK_VM: true
    <<: *unit_tests_steps

  mac_bats_tests:
    macos:
      xcode: "9.0"
    <<: *bats_tests_steps

  linux_bats_tests:
    docker:
      - image: circleci/golang:1.9
    <<: *bats_tests_steps

  mac_deploy:
    macos:
      xcode: "9.0"
    <<: *deploy_steps

  linux_deploy:
    docker:
      - image: circleci/golang:1.9
    <<: *deploy_steps

workflows:
  version: 2
  mac_build:
    jobs:
      - mac_env_setup:
          filters:
            tags:
              only: /.*/
      - mac_sputnik_vm:
          requires:
            - mac_env_setup
          filters:
            tags:
              only: /.*/
      - mac_evm_unit_tests:
          requires:
            - mac_env_setup
          filters:
            tags:
              only: /.*/
      - mac_sputnikvm_unit_tests:
          requires:
            - mac_sputnik_vm
          filters:
            tags:
              only: /.*/
      - mac_bats_tests:
          requires:
            - mac_sputnik_vm
          filters:
            tags:
              only: /.*/
      - mac_deploy:
          requires:
            - mac_evm_unit_tests
            - mac_sputnikvm_unit_tests
            - mac_bats_tests
          filters:
            branches:
              only: master
            tags:
              only: /.*/

  linux_build:
    jobs:
      - linux_env_setup:
          filters:
            tags:
              only: /.*/
      - linux_sputnik_vm:
          requires:
            - linux_env_setup
          filters:
            tags:
              only: /.*/
      - linux_evm_unit_tests:
          requires:
            - linux_env_setup
          filters:
            tags:
              only: /.*/
      - linux_sputnikvm_unit_tests:
          requires:
            - linux_sputnik_vm
          filters:
            tags:
              only: /.*/
      - linux_bats_tests:
          requires:
            - linux_sputnik_vm
          filters:
            tags:
              only: /.*/
      - linux_deploy:
          requires:
            - linux_evm_unit_tests
            - linux_sputnikvm_unit_tests
            - linux_bats_tests
          filters:
            branches:
              only: master
            tags:
              only: /.*/
